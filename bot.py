import logging
import json
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BotBlocked

API_TOKEN = os.getenv("BOT_TOKEN")  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –§–∞–π–ª —Å –±–∞–∑–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = 'user_data.json'

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –±–∞–∑—É
def load_users():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    else:
        return []

def save_users(users):
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(users, f)

users = load_users()

# 15 —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
methods = [
    "üíº –°–ø–æ—Å–æ–± 1: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ —Å–∞–π—Ç–µ —Ñ—Ä–∏–ª–∞–Ω—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ—Å—Ç—ã–µ —É—Å–ª—É–≥–∏: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏...",
    "üì∑ –°–ø–æ—Å–æ–± 2: –ü—Ä–æ–¥–∞–≤–∞–π —Å–≤–æ–∏ —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç–æ–∫–∞—Ö ‚Äì –¥–∞–∂–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞!",
    "üìã –°–ø–æ—Å–æ–± 3: –î–µ–ª–∞–π —Ä–µ–∑—é–º–µ/–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞ –¥–µ–Ω—å–≥–∏ (–Ω–∞—Ö–æ–¥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Telegram/Avito)",
    "üì¢ –°–ø–æ—Å–æ–± 4: –ü–æ–º–æ–≥–∞–π –º–∞–ª–æ–º—É –±–∏–∑–Ω–µ—Å—É ‚Äî –≤–≤–µ–¥–∏ Instagram, –¥–µ–ª–∞–π –ø–æ—Å—Ç—ã, —Å—Ç–æ—Ä–∏—Å",
    "üìù –°–ø–æ—Å–æ–± 5: –ü–∏—à–∏ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –±–ª–æ–≥–æ–≤ (–º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ò–ò)",
    "üé® –°–ø–æ—Å–æ–± 6: –°–æ–∑–¥–∞–π –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ/–ø–æ–¥–∫–∞—Å—Ç–æ–≤, –ø—Ä–æ–¥–∞–≤–∞–π –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å-–±–∏—Ä–∂–∞—Ö",
    "üì≤ –°–ø–æ—Å–æ–± 7: –î–µ–ª–∞–π Telegram-–±–æ—Ç–æ–≤ –ø–æ–¥ –∑–∞–ø—Ä–æ—Å (–ø—Ä–æ—Å—Ç—ã–µ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –±–µ–∑ –∫–æ–¥–∞)",
    "üõí –°–ø–æ—Å–æ–± 8: –ü—Ä–æ–¥–∞–≤–∞–π —Ç–æ–≤–∞—Ä—ã –ø–æ –¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥—É ‚Äî –∏—â–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –ø—Ä–æ–¥–∞–≤–∞–π —á–µ—Ä–µ–∑ Telegram",
    "üß† –°–ø–æ—Å–æ–± 9: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º, –≥–¥–µ —Ç—ã —ç–∫—Å–ø–µ—Ä—Ç: —É—á—ë–±–∞, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, –∫–∞—Ä—å–µ—Ä–∞",
    "üéÆ –°–ø–æ—Å–æ–± 10: –ü–æ–º–æ–≥–∏ –¥–µ—Ç—è–º –∏–ª–∏ –≤–∑—Ä–æ—Å–ª—ã–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –≤ –∏–≥—Ä–∞—Ö",
    "üí∞ –°–ø–æ—Å–æ–± 11: –°–º–æ—Ç—Ä–∏ —Ä–µ–∫–ª–∞–º—É/–∑–∞–¥–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö, –ø–æ–ª—É—á–∞–π –∫–µ—à–±—ç–∫",
    "üëÄ –°–ø–æ—Å–æ–± 12: –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
    "üîé –°–ø–æ—Å–æ–± 13: –†–µ—Å–µ—Ä—á –∏ –ø–æ–¥–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥ –Ω–∞ –∑–∞–∫–∞–∑",
    "üìö –°–ø–æ—Å–æ–± 14: –î–µ–ª–∞–π –ø–æ–¥–±–æ—Ä–∫–∏ —Ñ–∏–ª—å–º–æ–≤, –∫–Ω–∏–≥ –∏ –ø—Ä–æ–¥–∞–≤–∞–π –∫–∞–∫ –ø–æ–¥–±–æ—Ä–∫—É",
    "üß© –°–ø–æ—Å–æ–± 15: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–≤–∞–π –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å —Ü–µ–Ω–Ω–æ—Å—Ç—å—é (—Ä–µ—Ñ–µ—Ä–∞—Ç—ã, —à–ø–æ—Ä—ã, —à–∞–±–ª–æ–Ω—ã)"
]

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users.append(user_id)
        save_users(users)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ '–°—Ö–µ–º–∫–∞ –ø—Ä–∏–ª–µ—Ç–µ–ª–∞' ‚Äì —Ç–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –æ–Ω–ª–∞–π–Ω.\n\n"
        "–ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
        reply_markup=start_keyboard()
    )

# –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞—Ç—å
def start_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞, –ø–æ–µ—Ö–∞–ª–∏!", callback_data='start_methods'))
    return kb

# –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ö–µ–º
@dp.callback_query_handler(lambda c: c.data.startswith('start_methods') or c.data.startswith('method_'))
async def send_method(callback_query: types.CallbackQuery):
    if callback_query.data == 'start_methods':
        index = 0
    else:
        index = int(callback_query.data.split('_')[1])

    text = methods[index]

    kb = InlineKeyboardMarkup()
    if index > 0:
        kb.insert(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'method_{index - 1}'))
    if index < len(methods) - 1:
        kb.insert(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f'method_{index + 1}'))

    # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ ‚Äî "–Ø –≤—Å—ë –ø–æ—Å–º–æ—Ç—Ä–µ–ª"
    kb.add(InlineKeyboardButton("‚úÖ –Ø –≤—Å—ë –ø–æ—Å–º–æ—Ç—Ä–µ–ª", callback_data='done_reading'))

    await callback_query.message.edit_text(text, reply_markup=kb)

# –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –ø–æ—Å–º–æ—Ç—Ä–µ–ª
@dp.callback_query_handler(lambda c: c.data == 'done_reading')
async def finish_reading(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≤—Ç—Ä–∞ –ø—Ä–∏–ª–µ—Ç–∏—Ç –Ω–æ–≤–∞—è —Å—Ö–µ–º–∞. –ó–∞–≥–ª—è–¥—ã–≤–∞–π –≤ –±–æ—Ç–∞ –≤ 12:00 üïõ")

# –†–∞—Å—Å—ã–ª–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
async def daily_broadcast():
    now = datetime.now()
    while True:
        if datetime.now().hour == 12:
            for user_id in users:
                try:
                    await bot.send_message(user_id, f"üì¨ –ù–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–Ω—è!\n\nüí° {methods[datetime.now().day % len(methods)]}")
                except BotBlocked:
                    continue
            await asyncio.sleep(3600)  # –ü–æ–¥–æ–∂–¥—ë–º 1 —á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        else:
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    loop.create_task(daily_broadcast())
    executor.start_polling(dp, skip_updates=True)
